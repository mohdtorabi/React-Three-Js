{"ast":null,"code":"var _jsxFileName = \"/Users/torabi97/Desktop/post-bootcamp/react-three/src/components/section.js\";\nimport React, { createContext, useRef, useContext } from \"react\";\nimport { useFrame, useThree } from \"react-three-fiber\";\nimport lerp from \"lerp\";\nimport state from \"./state\";\nconst offsetContext = createContext(0);\n\nfunction Section({\n  children,\n  offset,\n  factor,\n  ...props\n}) {\n  const {\n    offset: parentOffset,\n    sectionHeight,\n    aspect\n  } = useSection();\n  const ref = useRef();\n  offset = offset !== undefined ? offset : parentOffset;\n  useFrame(() => {\n    const curY = ref.current.position.y;\n    const curTop = state.top.current / aspect;\n    ref.current.position.y = lerp(curY, curTop / state.zoom * factor, 0.1);\n  });\n  return /*#__PURE__*/React.createElement(offsetContext.Provider, {\n    value: offset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"group\", Object.assign({}, props, {\n    position: [0, -sectionHeight * offset * factor, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, children)));\n}\n\nfunction useSection() {\n  const {\n    sections,\n    pages,\n    zoom\n  } = state;\n  const {\n    size,\n    viewport\n  } = useThree();\n  const offset = useContext(offsetContext);\n  const viewportWidth = viewport.width;\n  const viewportHeight = viewport.height;\n  const canvasWidth = viewportWidth / zoom;\n  const canvasHeight = viewportHeight / zoom;\n  const mobile = size.width < 700;\n  const margin = canvasWidth * (mobile ? 0.2 : 0.1);\n  const contentMaxWidth = canvasWidth * (mobile ? 0.8 : 0.6);\n  const sectionHeight = canvasHeight * ((pages - 1) / (sections - 1));\n  const aspect = size.height / viewportHeight;\n  return {\n    aspect,\n    viewport,\n    offset,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    mobile,\n    margin,\n    contentMaxWidth,\n    sectionHeight\n  };\n}\n\nexport { Section, useSection };","map":{"version":3,"sources":["/Users/torabi97/Desktop/post-bootcamp/react-three/src/components/section.js"],"names":["React","createContext","useRef","useContext","useFrame","useThree","lerp","state","offsetContext","Section","children","offset","factor","props","parentOffset","sectionHeight","aspect","useSection","ref","undefined","curY","current","position","y","curTop","top","zoom","sections","pages","size","viewport","viewportWidth","width","viewportHeight","height","canvasWidth","canvasHeight","mobile","margin","contentMaxWidth"],"mappings":"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","sourcesContent":["import React, { createContext, useRef, useContext } from \"react\";\nimport { useFrame, useThree } from \"react-three-fiber\";\nimport lerp from \"lerp\";\nimport state from \"./state\";\n\nconst offsetContext = createContext(0);\n\nfunction Section({ children, offset, factor, ...props }) {\n  const { offset: parentOffset, sectionHeight, aspect } = useSection();\n  const ref = useRef();\n  offset = offset !== undefined ? offset : parentOffset;\n  useFrame(() => {\n    const curY = ref.current.position.y;\n    const curTop = state.top.current / aspect;\n    ref.current.position.y = lerp(curY, (curTop / state.zoom) * factor, 0.1);\n  });\n  return (\n    <offsetContext.Provider value={offset}>\n      <group {...props} position={[0, -sectionHeight * offset * factor, 0]}>\n        <group ref={ref}>{children}</group>\n      </group>\n    </offsetContext.Provider>\n  );\n}\n\nfunction useSection() {\n  const { sections, pages, zoom } = state;\n  const { size, viewport } = useThree();\n  const offset = useContext(offsetContext);\n  const viewportWidth = viewport.width;\n  const viewportHeight = viewport.height;\n  const canvasWidth = viewportWidth / zoom;\n  const canvasHeight = viewportHeight / zoom;\n  const mobile = size.width < 700;\n  const margin = canvasWidth * (mobile ? 0.2 : 0.1);\n  const contentMaxWidth = canvasWidth * (mobile ? 0.8 : 0.6);\n  const sectionHeight = canvasHeight * ((pages - 1) / (sections - 1));\n  const aspect = size.height / viewportHeight;\n  return {\n    aspect,\n    viewport,\n    offset,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    mobile,\n    margin,\n    contentMaxWidth,\n    sectionHeight,\n  };\n}\n\nexport { Section, useSection };\n"]},"metadata":{},"sourceType":"module"}